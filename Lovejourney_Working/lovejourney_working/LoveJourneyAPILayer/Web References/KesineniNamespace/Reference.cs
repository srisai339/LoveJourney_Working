//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace BusAPILayer.KesineniNamespace {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="commonSoap", Namespace="http://microsoft.com/webservices/")]
    public partial class common : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSourceStationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDestinationStationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBoardingPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDroppingPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFareOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeatLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback BookTicketsOnwardJourneyOperationCompleted;
        
        private System.Threading.SendOrPostCallback BookTicketsRoundTripJourneyOperationCompleted;
        
        private System.Threading.SendOrPostCallback BookTicketsConfirmationOnwardJourneyOperationCompleted;
        
        private System.Threading.SendOrPostCallback BookTicketsConfirmationRoundTripJourneyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmCancelTicketsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelTicketsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelBlockedTicketsOnwardJourneyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelBlockedTicketsRoundTripJourneyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public common() {
            this.Url = global::BusAPILayer.Properties.Settings.Default.LoveJourneyAPILayer_KesineniNamespace_common;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSourceStationsCompletedEventHandler GetSourceStationsCompleted;
        
        /// <remarks/>
        public event GetDestinationStationsCompletedEventHandler GetDestinationStationsCompleted;
        
        /// <remarks/>
        public event GetServicesCompletedEventHandler GetServicesCompleted;
        
        /// <remarks/>
        public event GetServicesDetailsCompletedEventHandler GetServicesDetailsCompleted;
        
        /// <remarks/>
        public event GetSchedulesCompletedEventHandler GetSchedulesCompleted;
        
        /// <remarks/>
        public event GetBoardingPointsCompletedEventHandler GetBoardingPointsCompleted;
        
        /// <remarks/>
        public event GetDroppingPointsCompletedEventHandler GetDroppingPointsCompleted;
        
        /// <remarks/>
        public event CheckFareCompletedEventHandler CheckFareCompleted;
        
        /// <remarks/>
        public event GetSeatLayoutCompletedEventHandler GetSeatLayoutCompleted;
        
        /// <remarks/>
        public event BookTicketsOnwardJourneyCompletedEventHandler BookTicketsOnwardJourneyCompleted;
        
        /// <remarks/>
        public event BookTicketsRoundTripJourneyCompletedEventHandler BookTicketsRoundTripJourneyCompleted;
        
        /// <remarks/>
        public event BookTicketsConfirmationOnwardJourneyCompletedEventHandler BookTicketsConfirmationOnwardJourneyCompleted;
        
        /// <remarks/>
        public event BookTicketsConfirmationRoundTripJourneyCompletedEventHandler BookTicketsConfirmationRoundTripJourneyCompleted;
        
        /// <remarks/>
        public event ConfirmCancelTicketsCompletedEventHandler ConfirmCancelTicketsCompleted;
        
        /// <remarks/>
        public event CancelTicketsCompletedEventHandler CancelTicketsCompleted;
        
        /// <remarks/>
        public event CancelBlockedTicketsOnwardJourneyCompletedEventHandler CancelBlockedTicketsOnwardJourneyCompleted;
        
        /// <remarks/>
        public event CancelBlockedTicketsRoundTripJourneyCompletedEventHandler CancelBlockedTicketsRoundTripJourneyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetSourceStations", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSourceStations(string loginID, string password) {
            object[] results = this.Invoke("GetSourceStations", new object[] {
                        loginID,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceStationsAsync(string loginID, string password) {
            this.GetSourceStationsAsync(loginID, password, null);
        }
        
        /// <remarks/>
        public void GetSourceStationsAsync(string loginID, string password, object userState) {
            if ((this.GetSourceStationsOperationCompleted == null)) {
                this.GetSourceStationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceStationsOperationCompleted);
            }
            this.InvokeAsync("GetSourceStations", new object[] {
                        loginID,
                        password}, this.GetSourceStationsOperationCompleted, userState);
        }
        
        private void OnGetSourceStationsOperationCompleted(object arg) {
            if ((this.GetSourceStationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceStationsCompleted(this, new GetSourceStationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetDestinationStations", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDestinationStations(string loginID, string password, int sourceStationID) {
            object[] results = this.Invoke("GetDestinationStations", new object[] {
                        loginID,
                        password,
                        sourceStationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDestinationStationsAsync(string loginID, string password, int sourceStationID) {
            this.GetDestinationStationsAsync(loginID, password, sourceStationID, null);
        }
        
        /// <remarks/>
        public void GetDestinationStationsAsync(string loginID, string password, int sourceStationID, object userState) {
            if ((this.GetDestinationStationsOperationCompleted == null)) {
                this.GetDestinationStationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDestinationStationsOperationCompleted);
            }
            this.InvokeAsync("GetDestinationStations", new object[] {
                        loginID,
                        password,
                        sourceStationID}, this.GetDestinationStationsOperationCompleted, userState);
        }
        
        private void OnGetDestinationStationsOperationCompleted(object arg) {
            if ((this.GetDestinationStationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDestinationStationsCompleted(this, new GetDestinationStationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetServices", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServices(string loginID, string password, int sourceStationID, int destinationStationID, string onwardJourneyDate, int seatType) {
            object[] results = this.Invoke("GetServices", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        seatType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesAsync(string loginID, string password, int sourceStationID, int destinationStationID, string onwardJourneyDate, int seatType) {
            this.GetServicesAsync(loginID, password, sourceStationID, destinationStationID, onwardJourneyDate, seatType, null);
        }
        
        /// <remarks/>
        public void GetServicesAsync(string loginID, string password, int sourceStationID, int destinationStationID, string onwardJourneyDate, int seatType, object userState) {
            if ((this.GetServicesOperationCompleted == null)) {
                this.GetServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesOperationCompleted);
            }
            this.InvokeAsync("GetServices", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        seatType}, this.GetServicesOperationCompleted, userState);
        }
        
        private void OnGetServicesOperationCompleted(object arg) {
            if ((this.GetServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesCompleted(this, new GetServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetServicesDetails", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServicesDetails(string loginID, string password, int sourceStationID, int destinationStationID, string onwardJourneyDate, long serviceID) {
            object[] results = this.Invoke("GetServicesDetails", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        serviceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesDetailsAsync(string loginID, string password, int sourceStationID, int destinationStationID, string onwardJourneyDate, long serviceID) {
            this.GetServicesDetailsAsync(loginID, password, sourceStationID, destinationStationID, onwardJourneyDate, serviceID, null);
        }
        
        /// <remarks/>
        public void GetServicesDetailsAsync(string loginID, string password, int sourceStationID, int destinationStationID, string onwardJourneyDate, long serviceID, object userState) {
            if ((this.GetServicesDetailsOperationCompleted == null)) {
                this.GetServicesDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesDetailsOperationCompleted);
            }
            this.InvokeAsync("GetServicesDetails", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        serviceID}, this.GetServicesDetailsOperationCompleted, userState);
        }
        
        private void OnGetServicesDetailsOperationCompleted(object arg) {
            if ((this.GetServicesDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesDetailsCompleted(this, new GetServicesDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetSchedules", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSchedules(string loginID, string password) {
            object[] results = this.Invoke("GetSchedules", new object[] {
                        loginID,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchedulesAsync(string loginID, string password) {
            this.GetSchedulesAsync(loginID, password, null);
        }
        
        /// <remarks/>
        public void GetSchedulesAsync(string loginID, string password, object userState) {
            if ((this.GetSchedulesOperationCompleted == null)) {
                this.GetSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedulesOperationCompleted);
            }
            this.InvokeAsync("GetSchedules", new object[] {
                        loginID,
                        password}, this.GetSchedulesOperationCompleted, userState);
        }
        
        private void OnGetSchedulesOperationCompleted(object arg) {
            if ((this.GetSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchedulesCompleted(this, new GetSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetBoardingPoints", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBoardingPoints(string loginID, string password, string journeyDate, long serviceID, int sourceStationID, int destinationStationID) {
            object[] results = this.Invoke("GetBoardingPoints", new object[] {
                        loginID,
                        password,
                        journeyDate,
                        serviceID,
                        sourceStationID,
                        destinationStationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBoardingPointsAsync(string loginID, string password, string journeyDate, long serviceID, int sourceStationID, int destinationStationID) {
            this.GetBoardingPointsAsync(loginID, password, journeyDate, serviceID, sourceStationID, destinationStationID, null);
        }
        
        /// <remarks/>
        public void GetBoardingPointsAsync(string loginID, string password, string journeyDate, long serviceID, int sourceStationID, int destinationStationID, object userState) {
            if ((this.GetBoardingPointsOperationCompleted == null)) {
                this.GetBoardingPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBoardingPointsOperationCompleted);
            }
            this.InvokeAsync("GetBoardingPoints", new object[] {
                        loginID,
                        password,
                        journeyDate,
                        serviceID,
                        sourceStationID,
                        destinationStationID}, this.GetBoardingPointsOperationCompleted, userState);
        }
        
        private void OnGetBoardingPointsOperationCompleted(object arg) {
            if ((this.GetBoardingPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBoardingPointsCompleted(this, new GetBoardingPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetDroppingPoints", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDroppingPoints(string loginID, string password, string journeyDate, long serviceID, int sourceStationID, int destinationStationID) {
            object[] results = this.Invoke("GetDroppingPoints", new object[] {
                        loginID,
                        password,
                        journeyDate,
                        serviceID,
                        sourceStationID,
                        destinationStationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDroppingPointsAsync(string loginID, string password, string journeyDate, long serviceID, int sourceStationID, int destinationStationID) {
            this.GetDroppingPointsAsync(loginID, password, journeyDate, serviceID, sourceStationID, destinationStationID, null);
        }
        
        /// <remarks/>
        public void GetDroppingPointsAsync(string loginID, string password, string journeyDate, long serviceID, int sourceStationID, int destinationStationID, object userState) {
            if ((this.GetDroppingPointsOperationCompleted == null)) {
                this.GetDroppingPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDroppingPointsOperationCompleted);
            }
            this.InvokeAsync("GetDroppingPoints", new object[] {
                        loginID,
                        password,
                        journeyDate,
                        serviceID,
                        sourceStationID,
                        destinationStationID}, this.GetDroppingPointsOperationCompleted, userState);
        }
        
        private void OnGetDroppingPointsOperationCompleted(object arg) {
            if ((this.GetDroppingPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDroppingPointsCompleted(this, new GetDroppingPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/CheckFare", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFare(string loginID, string password, int sourceId, int destinationId, string journeyDate) {
            object[] results = this.Invoke("CheckFare", new object[] {
                        loginID,
                        password,
                        sourceId,
                        destinationId,
                        journeyDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFareAsync(string loginID, string password, int sourceId, int destinationId, string journeyDate) {
            this.CheckFareAsync(loginID, password, sourceId, destinationId, journeyDate, null);
        }
        
        /// <remarks/>
        public void CheckFareAsync(string loginID, string password, int sourceId, int destinationId, string journeyDate, object userState) {
            if ((this.CheckFareOperationCompleted == null)) {
                this.CheckFareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFareOperationCompleted);
            }
            this.InvokeAsync("CheckFare", new object[] {
                        loginID,
                        password,
                        sourceId,
                        destinationId,
                        journeyDate}, this.CheckFareOperationCompleted, userState);
        }
        
        private void OnCheckFareOperationCompleted(object arg) {
            if ((this.CheckFareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFareCompleted(this, new CheckFareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/GetSeatLayout", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSeatLayout(string loginID, string password, int sourceStationID, int destinationStationID, string journeyDate, long serviceID, int coachTypeID) {
            object[] results = this.Invoke("GetSeatLayout", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        journeyDate,
                        serviceID,
                        coachTypeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSeatLayoutAsync(string loginID, string password, int sourceStationID, int destinationStationID, string journeyDate, long serviceID, int coachTypeID) {
            this.GetSeatLayoutAsync(loginID, password, sourceStationID, destinationStationID, journeyDate, serviceID, coachTypeID, null);
        }
        
        /// <remarks/>
        public void GetSeatLayoutAsync(string loginID, string password, int sourceStationID, int destinationStationID, string journeyDate, long serviceID, int coachTypeID, object userState) {
            if ((this.GetSeatLayoutOperationCompleted == null)) {
                this.GetSeatLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeatLayoutOperationCompleted);
            }
            this.InvokeAsync("GetSeatLayout", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        journeyDate,
                        serviceID,
                        coachTypeID}, this.GetSeatLayoutOperationCompleted, userState);
        }
        
        private void OnGetSeatLayoutOperationCompleted(object arg) {
            if ((this.GetSeatLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeatLayoutCompleted(this, new GetSeatLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/BookTicketsOnwardJourney", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BookTicketsOnwardJourney(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string journeyDate, 
                    long serviceID, 
                    int coachTypeID, 
                    int noOfSeats, 
                    string seatNumbersList, 
                    string firstNameList, 
                    string lastNameList, 
                    string genderList, 
                    string ageList, 
                    string contactNumberList, 
                    string boardingPointIDList, 
                    string droppingPointID, 
                    string ticketFare, 
                    string emailID, 
                    string address, 
                    string photoIDType, 
                    string photoIDNo, 
                    string photoIDIssuingAuthority, 
                    decimal totalBasicFare, 
                    decimal serviceTaxPercentage, 
                    string discountCode) {
            object[] results = this.Invoke("BookTicketsOnwardJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        journeyDate,
                        serviceID,
                        coachTypeID,
                        noOfSeats,
                        seatNumbersList,
                        firstNameList,
                        lastNameList,
                        genderList,
                        ageList,
                        contactNumberList,
                        boardingPointIDList,
                        droppingPointID,
                        ticketFare,
                        emailID,
                        address,
                        photoIDType,
                        photoIDNo,
                        photoIDIssuingAuthority,
                        totalBasicFare,
                        serviceTaxPercentage,
                        discountCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BookTicketsOnwardJourneyAsync(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string journeyDate, 
                    long serviceID, 
                    int coachTypeID, 
                    int noOfSeats, 
                    string seatNumbersList, 
                    string firstNameList, 
                    string lastNameList, 
                    string genderList, 
                    string ageList, 
                    string contactNumberList, 
                    string boardingPointIDList, 
                    string droppingPointID, 
                    string ticketFare, 
                    string emailID, 
                    string address, 
                    string photoIDType, 
                    string photoIDNo, 
                    string photoIDIssuingAuthority, 
                    decimal totalBasicFare, 
                    decimal serviceTaxPercentage, 
                    string discountCode) {
            this.BookTicketsOnwardJourneyAsync(loginID, password, sourceStationID, destinationStationID, journeyDate, serviceID, coachTypeID, noOfSeats, seatNumbersList, firstNameList, lastNameList, genderList, ageList, contactNumberList, boardingPointIDList, droppingPointID, ticketFare, emailID, address, photoIDType, photoIDNo, photoIDIssuingAuthority, totalBasicFare, serviceTaxPercentage, discountCode, null);
        }
        
        /// <remarks/>
        public void BookTicketsOnwardJourneyAsync(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string journeyDate, 
                    long serviceID, 
                    int coachTypeID, 
                    int noOfSeats, 
                    string seatNumbersList, 
                    string firstNameList, 
                    string lastNameList, 
                    string genderList, 
                    string ageList, 
                    string contactNumberList, 
                    string boardingPointIDList, 
                    string droppingPointID, 
                    string ticketFare, 
                    string emailID, 
                    string address, 
                    string photoIDType, 
                    string photoIDNo, 
                    string photoIDIssuingAuthority, 
                    decimal totalBasicFare, 
                    decimal serviceTaxPercentage, 
                    string discountCode, 
                    object userState) {
            if ((this.BookTicketsOnwardJourneyOperationCompleted == null)) {
                this.BookTicketsOnwardJourneyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookTicketsOnwardJourneyOperationCompleted);
            }
            this.InvokeAsync("BookTicketsOnwardJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        journeyDate,
                        serviceID,
                        coachTypeID,
                        noOfSeats,
                        seatNumbersList,
                        firstNameList,
                        lastNameList,
                        genderList,
                        ageList,
                        contactNumberList,
                        boardingPointIDList,
                        droppingPointID,
                        ticketFare,
                        emailID,
                        address,
                        photoIDType,
                        photoIDNo,
                        photoIDIssuingAuthority,
                        totalBasicFare,
                        serviceTaxPercentage,
                        discountCode}, this.BookTicketsOnwardJourneyOperationCompleted, userState);
        }
        
        private void OnBookTicketsOnwardJourneyOperationCompleted(object arg) {
            if ((this.BookTicketsOnwardJourneyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookTicketsOnwardJourneyCompleted(this, new BookTicketsOnwardJourneyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/BookTicketsRoundTripJourney", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BookTicketsRoundTripJourney(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string onwardJourneyDate, 
                    long onwardServiceID, 
                    int onwardCoachTypeID, 
                    int onwardNoOfSeats, 
                    string onwardSeatNumberList, 
                    string onwardFirstNameList, 
                    string onwardLastNameList, 
                    string onwardGenderList, 
                    string onwardAgeList, 
                    string onwardContactNumberList, 
                    string onwardBoardingPointIDList, 
                    string onwardDroppingPointID, 
                    string onwardTicketFare, 
                    decimal onwardTotalBasicFare, 
                    decimal onwardServiceTaxPercentage, 
                    string onwardDiscountCode, 
                    string returnJourneyDate, 
                    long returnServiceID, 
                    int returnCoachTypeID, 
                    int returnNoOfSeats, 
                    string returnSeatNumberList, 
                    string returnFirstNameList, 
                    string returnLastNameList, 
                    string returnGenderList, 
                    string returnAgeList, 
                    string returnContactNumberList, 
                    string returnBoardingPointIDList, 
                    string returnDroppingPointID, 
                    string returnTicketFare, 
                    decimal returnTotalBasicFare, 
                    decimal returnServiceTaxPercentage, 
                    string returnDiscountCode, 
                    string emailID, 
                    string address, 
                    string photoIDType, 
                    string photoIDNo, 
                    string photoIDIssuingAuthority) {
            object[] results = this.Invoke("BookTicketsRoundTripJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        onwardServiceID,
                        onwardCoachTypeID,
                        onwardNoOfSeats,
                        onwardSeatNumberList,
                        onwardFirstNameList,
                        onwardLastNameList,
                        onwardGenderList,
                        onwardAgeList,
                        onwardContactNumberList,
                        onwardBoardingPointIDList,
                        onwardDroppingPointID,
                        onwardTicketFare,
                        onwardTotalBasicFare,
                        onwardServiceTaxPercentage,
                        onwardDiscountCode,
                        returnJourneyDate,
                        returnServiceID,
                        returnCoachTypeID,
                        returnNoOfSeats,
                        returnSeatNumberList,
                        returnFirstNameList,
                        returnLastNameList,
                        returnGenderList,
                        returnAgeList,
                        returnContactNumberList,
                        returnBoardingPointIDList,
                        returnDroppingPointID,
                        returnTicketFare,
                        returnTotalBasicFare,
                        returnServiceTaxPercentage,
                        returnDiscountCode,
                        emailID,
                        address,
                        photoIDType,
                        photoIDNo,
                        photoIDIssuingAuthority});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BookTicketsRoundTripJourneyAsync(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string onwardJourneyDate, 
                    long onwardServiceID, 
                    int onwardCoachTypeID, 
                    int onwardNoOfSeats, 
                    string onwardSeatNumberList, 
                    string onwardFirstNameList, 
                    string onwardLastNameList, 
                    string onwardGenderList, 
                    string onwardAgeList, 
                    string onwardContactNumberList, 
                    string onwardBoardingPointIDList, 
                    string onwardDroppingPointID, 
                    string onwardTicketFare, 
                    decimal onwardTotalBasicFare, 
                    decimal onwardServiceTaxPercentage, 
                    string onwardDiscountCode, 
                    string returnJourneyDate, 
                    long returnServiceID, 
                    int returnCoachTypeID, 
                    int returnNoOfSeats, 
                    string returnSeatNumberList, 
                    string returnFirstNameList, 
                    string returnLastNameList, 
                    string returnGenderList, 
                    string returnAgeList, 
                    string returnContactNumberList, 
                    string returnBoardingPointIDList, 
                    string returnDroppingPointID, 
                    string returnTicketFare, 
                    decimal returnTotalBasicFare, 
                    decimal returnServiceTaxPercentage, 
                    string returnDiscountCode, 
                    string emailID, 
                    string address, 
                    string photoIDType, 
                    string photoIDNo, 
                    string photoIDIssuingAuthority) {
            this.BookTicketsRoundTripJourneyAsync(loginID, password, sourceStationID, destinationStationID, onwardJourneyDate, onwardServiceID, onwardCoachTypeID, onwardNoOfSeats, onwardSeatNumberList, onwardFirstNameList, onwardLastNameList, onwardGenderList, onwardAgeList, onwardContactNumberList, onwardBoardingPointIDList, onwardDroppingPointID, onwardTicketFare, onwardTotalBasicFare, onwardServiceTaxPercentage, onwardDiscountCode, returnJourneyDate, returnServiceID, returnCoachTypeID, returnNoOfSeats, returnSeatNumberList, returnFirstNameList, returnLastNameList, returnGenderList, returnAgeList, returnContactNumberList, returnBoardingPointIDList, returnDroppingPointID, returnTicketFare, returnTotalBasicFare, returnServiceTaxPercentage, returnDiscountCode, emailID, address, photoIDType, photoIDNo, photoIDIssuingAuthority, null);
        }
        
        /// <remarks/>
        public void BookTicketsRoundTripJourneyAsync(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string onwardJourneyDate, 
                    long onwardServiceID, 
                    int onwardCoachTypeID, 
                    int onwardNoOfSeats, 
                    string onwardSeatNumberList, 
                    string onwardFirstNameList, 
                    string onwardLastNameList, 
                    string onwardGenderList, 
                    string onwardAgeList, 
                    string onwardContactNumberList, 
                    string onwardBoardingPointIDList, 
                    string onwardDroppingPointID, 
                    string onwardTicketFare, 
                    decimal onwardTotalBasicFare, 
                    decimal onwardServiceTaxPercentage, 
                    string onwardDiscountCode, 
                    string returnJourneyDate, 
                    long returnServiceID, 
                    int returnCoachTypeID, 
                    int returnNoOfSeats, 
                    string returnSeatNumberList, 
                    string returnFirstNameList, 
                    string returnLastNameList, 
                    string returnGenderList, 
                    string returnAgeList, 
                    string returnContactNumberList, 
                    string returnBoardingPointIDList, 
                    string returnDroppingPointID, 
                    string returnTicketFare, 
                    decimal returnTotalBasicFare, 
                    decimal returnServiceTaxPercentage, 
                    string returnDiscountCode, 
                    string emailID, 
                    string address, 
                    string photoIDType, 
                    string photoIDNo, 
                    string photoIDIssuingAuthority, 
                    object userState) {
            if ((this.BookTicketsRoundTripJourneyOperationCompleted == null)) {
                this.BookTicketsRoundTripJourneyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookTicketsRoundTripJourneyOperationCompleted);
            }
            this.InvokeAsync("BookTicketsRoundTripJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        onwardServiceID,
                        onwardCoachTypeID,
                        onwardNoOfSeats,
                        onwardSeatNumberList,
                        onwardFirstNameList,
                        onwardLastNameList,
                        onwardGenderList,
                        onwardAgeList,
                        onwardContactNumberList,
                        onwardBoardingPointIDList,
                        onwardDroppingPointID,
                        onwardTicketFare,
                        onwardTotalBasicFare,
                        onwardServiceTaxPercentage,
                        onwardDiscountCode,
                        returnJourneyDate,
                        returnServiceID,
                        returnCoachTypeID,
                        returnNoOfSeats,
                        returnSeatNumberList,
                        returnFirstNameList,
                        returnLastNameList,
                        returnGenderList,
                        returnAgeList,
                        returnContactNumberList,
                        returnBoardingPointIDList,
                        returnDroppingPointID,
                        returnTicketFare,
                        returnTotalBasicFare,
                        returnServiceTaxPercentage,
                        returnDiscountCode,
                        emailID,
                        address,
                        photoIDType,
                        photoIDNo,
                        photoIDIssuingAuthority}, this.BookTicketsRoundTripJourneyOperationCompleted, userState);
        }
        
        private void OnBookTicketsRoundTripJourneyOperationCompleted(object arg) {
            if ((this.BookTicketsRoundTripJourneyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookTicketsRoundTripJourneyCompleted(this, new BookTicketsRoundTripJourneyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/BookTicketsConfirmationOnwardJourney", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BookTicketsConfirmationOnwardJourney(string loginID, string password, int sourceStationID, int destinationStationID, string journeyDate, long serviceID, int serviceTransID, int noOfSeats, long blockedTicketID, string transactionID, string referenceCode) {
            object[] results = this.Invoke("BookTicketsConfirmationOnwardJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        journeyDate,
                        serviceID,
                        serviceTransID,
                        noOfSeats,
                        blockedTicketID,
                        transactionID,
                        referenceCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BookTicketsConfirmationOnwardJourneyAsync(string loginID, string password, int sourceStationID, int destinationStationID, string journeyDate, long serviceID, int serviceTransID, int noOfSeats, long blockedTicketID, string transactionID, string referenceCode) {
            this.BookTicketsConfirmationOnwardJourneyAsync(loginID, password, sourceStationID, destinationStationID, journeyDate, serviceID, serviceTransID, noOfSeats, blockedTicketID, transactionID, referenceCode, null);
        }
        
        /// <remarks/>
        public void BookTicketsConfirmationOnwardJourneyAsync(string loginID, string password, int sourceStationID, int destinationStationID, string journeyDate, long serviceID, int serviceTransID, int noOfSeats, long blockedTicketID, string transactionID, string referenceCode, object userState) {
            if ((this.BookTicketsConfirmationOnwardJourneyOperationCompleted == null)) {
                this.BookTicketsConfirmationOnwardJourneyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookTicketsConfirmationOnwardJourneyOperationCompleted);
            }
            this.InvokeAsync("BookTicketsConfirmationOnwardJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        journeyDate,
                        serviceID,
                        serviceTransID,
                        noOfSeats,
                        blockedTicketID,
                        transactionID,
                        referenceCode}, this.BookTicketsConfirmationOnwardJourneyOperationCompleted, userState);
        }
        
        private void OnBookTicketsConfirmationOnwardJourneyOperationCompleted(object arg) {
            if ((this.BookTicketsConfirmationOnwardJourneyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookTicketsConfirmationOnwardJourneyCompleted(this, new BookTicketsConfirmationOnwardJourneyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/BookTicketsConfirmationRoundTripJourney", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BookTicketsConfirmationRoundTripJourney(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string onwardJourneyDate, 
                    long onwardServiceID, 
                    int onwardServiceTransID, 
                    int onwardNoOfSeats, 
                    long onwardBlockedTicketID, 
                    string returnJourneyDate, 
                    long returnServiceID, 
                    int returnServiceTransID, 
                    int returnNoOfSeats, 
                    long returnBlockedTicketID, 
                    string transactionID, 
                    string referenceCode) {
            object[] results = this.Invoke("BookTicketsConfirmationRoundTripJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        onwardServiceID,
                        onwardServiceTransID,
                        onwardNoOfSeats,
                        onwardBlockedTicketID,
                        returnJourneyDate,
                        returnServiceID,
                        returnServiceTransID,
                        returnNoOfSeats,
                        returnBlockedTicketID,
                        transactionID,
                        referenceCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BookTicketsConfirmationRoundTripJourneyAsync(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string onwardJourneyDate, 
                    long onwardServiceID, 
                    int onwardServiceTransID, 
                    int onwardNoOfSeats, 
                    long onwardBlockedTicketID, 
                    string returnJourneyDate, 
                    long returnServiceID, 
                    int returnServiceTransID, 
                    int returnNoOfSeats, 
                    long returnBlockedTicketID, 
                    string transactionID, 
                    string referenceCode) {
            this.BookTicketsConfirmationRoundTripJourneyAsync(loginID, password, sourceStationID, destinationStationID, onwardJourneyDate, onwardServiceID, onwardServiceTransID, onwardNoOfSeats, onwardBlockedTicketID, returnJourneyDate, returnServiceID, returnServiceTransID, returnNoOfSeats, returnBlockedTicketID, transactionID, referenceCode, null);
        }
        
        /// <remarks/>
        public void BookTicketsConfirmationRoundTripJourneyAsync(
                    string loginID, 
                    string password, 
                    int sourceStationID, 
                    int destinationStationID, 
                    string onwardJourneyDate, 
                    long onwardServiceID, 
                    int onwardServiceTransID, 
                    int onwardNoOfSeats, 
                    long onwardBlockedTicketID, 
                    string returnJourneyDate, 
                    long returnServiceID, 
                    int returnServiceTransID, 
                    int returnNoOfSeats, 
                    long returnBlockedTicketID, 
                    string transactionID, 
                    string referenceCode, 
                    object userState) {
            if ((this.BookTicketsConfirmationRoundTripJourneyOperationCompleted == null)) {
                this.BookTicketsConfirmationRoundTripJourneyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookTicketsConfirmationRoundTripJourneyOperationCompleted);
            }
            this.InvokeAsync("BookTicketsConfirmationRoundTripJourney", new object[] {
                        loginID,
                        password,
                        sourceStationID,
                        destinationStationID,
                        onwardJourneyDate,
                        onwardServiceID,
                        onwardServiceTransID,
                        onwardNoOfSeats,
                        onwardBlockedTicketID,
                        returnJourneyDate,
                        returnServiceID,
                        returnServiceTransID,
                        returnNoOfSeats,
                        returnBlockedTicketID,
                        transactionID,
                        referenceCode}, this.BookTicketsConfirmationRoundTripJourneyOperationCompleted, userState);
        }
        
        private void OnBookTicketsConfirmationRoundTripJourneyOperationCompleted(object arg) {
            if ((this.BookTicketsConfirmationRoundTripJourneyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookTicketsConfirmationRoundTripJourneyCompleted(this, new BookTicketsConfirmationRoundTripJourneyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/ConfirmCancelTickets", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfirmCancelTickets(string loginID, string password, string PNRNumber, string firstName, string lastName, string dateofJourney, string seatNumbersList) {
            object[] results = this.Invoke("ConfirmCancelTickets", new object[] {
                        loginID,
                        password,
                        PNRNumber,
                        firstName,
                        lastName,
                        dateofJourney,
                        seatNumbersList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmCancelTicketsAsync(string loginID, string password, string PNRNumber, string firstName, string lastName, string dateofJourney, string seatNumbersList) {
            this.ConfirmCancelTicketsAsync(loginID, password, PNRNumber, firstName, lastName, dateofJourney, seatNumbersList, null);
        }
        
        /// <remarks/>
        public void ConfirmCancelTicketsAsync(string loginID, string password, string PNRNumber, string firstName, string lastName, string dateofJourney, string seatNumbersList, object userState) {
            if ((this.ConfirmCancelTicketsOperationCompleted == null)) {
                this.ConfirmCancelTicketsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmCancelTicketsOperationCompleted);
            }
            this.InvokeAsync("ConfirmCancelTickets", new object[] {
                        loginID,
                        password,
                        PNRNumber,
                        firstName,
                        lastName,
                        dateofJourney,
                        seatNumbersList}, this.ConfirmCancelTicketsOperationCompleted, userState);
        }
        
        private void OnConfirmCancelTicketsOperationCompleted(object arg) {
            if ((this.ConfirmCancelTicketsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmCancelTicketsCompleted(this, new ConfirmCancelTicketsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/CancelTickets", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelTickets(string loginID, string password, string PNRNumber, string firstName, string lastName, string dateofJourney, string seatNumbersList) {
            object[] results = this.Invoke("CancelTickets", new object[] {
                        loginID,
                        password,
                        PNRNumber,
                        firstName,
                        lastName,
                        dateofJourney,
                        seatNumbersList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelTicketsAsync(string loginID, string password, string PNRNumber, string firstName, string lastName, string dateofJourney, string seatNumbersList) {
            this.CancelTicketsAsync(loginID, password, PNRNumber, firstName, lastName, dateofJourney, seatNumbersList, null);
        }
        
        /// <remarks/>
        public void CancelTicketsAsync(string loginID, string password, string PNRNumber, string firstName, string lastName, string dateofJourney, string seatNumbersList, object userState) {
            if ((this.CancelTicketsOperationCompleted == null)) {
                this.CancelTicketsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelTicketsOperationCompleted);
            }
            this.InvokeAsync("CancelTickets", new object[] {
                        loginID,
                        password,
                        PNRNumber,
                        firstName,
                        lastName,
                        dateofJourney,
                        seatNumbersList}, this.CancelTicketsOperationCompleted, userState);
        }
        
        private void OnCancelTicketsOperationCompleted(object arg) {
            if ((this.CancelTicketsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelTicketsCompleted(this, new CancelTicketsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/CancelBlockedTicketsOnwardJourney", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelBlockedTicketsOnwardJourney(string loginID, string password, long blockedTicketID, int serviceTransID) {
            object[] results = this.Invoke("CancelBlockedTicketsOnwardJourney", new object[] {
                        loginID,
                        password,
                        blockedTicketID,
                        serviceTransID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelBlockedTicketsOnwardJourneyAsync(string loginID, string password, long blockedTicketID, int serviceTransID) {
            this.CancelBlockedTicketsOnwardJourneyAsync(loginID, password, blockedTicketID, serviceTransID, null);
        }
        
        /// <remarks/>
        public void CancelBlockedTicketsOnwardJourneyAsync(string loginID, string password, long blockedTicketID, int serviceTransID, object userState) {
            if ((this.CancelBlockedTicketsOnwardJourneyOperationCompleted == null)) {
                this.CancelBlockedTicketsOnwardJourneyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelBlockedTicketsOnwardJourneyOperationCompleted);
            }
            this.InvokeAsync("CancelBlockedTicketsOnwardJourney", new object[] {
                        loginID,
                        password,
                        blockedTicketID,
                        serviceTransID}, this.CancelBlockedTicketsOnwardJourneyOperationCompleted, userState);
        }
        
        private void OnCancelBlockedTicketsOnwardJourneyOperationCompleted(object arg) {
            if ((this.CancelBlockedTicketsOnwardJourneyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelBlockedTicketsOnwardJourneyCompleted(this, new CancelBlockedTicketsOnwardJourneyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/webservices/CancelBlockedTicketsRoundTripJourney", RequestNamespace="http://microsoft.com/webservices/", ResponseNamespace="http://microsoft.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelBlockedTicketsRoundTripJourney(string loginID, string password, long onwardBlockedTicketID, int onwardServiceTransID, long returnBlockedTicketID, int returnServiceTransID) {
            object[] results = this.Invoke("CancelBlockedTicketsRoundTripJourney", new object[] {
                        loginID,
                        password,
                        onwardBlockedTicketID,
                        onwardServiceTransID,
                        returnBlockedTicketID,
                        returnServiceTransID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelBlockedTicketsRoundTripJourneyAsync(string loginID, string password, long onwardBlockedTicketID, int onwardServiceTransID, long returnBlockedTicketID, int returnServiceTransID) {
            this.CancelBlockedTicketsRoundTripJourneyAsync(loginID, password, onwardBlockedTicketID, onwardServiceTransID, returnBlockedTicketID, returnServiceTransID, null);
        }
        
        /// <remarks/>
        public void CancelBlockedTicketsRoundTripJourneyAsync(string loginID, string password, long onwardBlockedTicketID, int onwardServiceTransID, long returnBlockedTicketID, int returnServiceTransID, object userState) {
            if ((this.CancelBlockedTicketsRoundTripJourneyOperationCompleted == null)) {
                this.CancelBlockedTicketsRoundTripJourneyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelBlockedTicketsRoundTripJourneyOperationCompleted);
            }
            this.InvokeAsync("CancelBlockedTicketsRoundTripJourney", new object[] {
                        loginID,
                        password,
                        onwardBlockedTicketID,
                        onwardServiceTransID,
                        returnBlockedTicketID,
                        returnServiceTransID}, this.CancelBlockedTicketsRoundTripJourneyOperationCompleted, userState);
        }
        
        private void OnCancelBlockedTicketsRoundTripJourneyOperationCompleted(object arg) {
            if ((this.CancelBlockedTicketsRoundTripJourneyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelBlockedTicketsRoundTripJourneyCompleted(this, new CancelBlockedTicketsRoundTripJourneyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSourceStationsCompletedEventHandler(object sender, GetSourceStationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceStationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceStationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDestinationStationsCompletedEventHandler(object sender, GetDestinationStationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDestinationStationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDestinationStationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServicesCompletedEventHandler(object sender, GetServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServicesDetailsCompletedEventHandler(object sender, GetServicesDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSchedulesCompletedEventHandler(object sender, GetSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetBoardingPointsCompletedEventHandler(object sender, GetBoardingPointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBoardingPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBoardingPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDroppingPointsCompletedEventHandler(object sender, GetDroppingPointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDroppingPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDroppingPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckFareCompletedEventHandler(object sender, CheckFareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSeatLayoutCompletedEventHandler(object sender, GetSeatLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeatLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeatLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BookTicketsOnwardJourneyCompletedEventHandler(object sender, BookTicketsOnwardJourneyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookTicketsOnwardJourneyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BookTicketsOnwardJourneyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BookTicketsRoundTripJourneyCompletedEventHandler(object sender, BookTicketsRoundTripJourneyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookTicketsRoundTripJourneyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BookTicketsRoundTripJourneyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BookTicketsConfirmationOnwardJourneyCompletedEventHandler(object sender, BookTicketsConfirmationOnwardJourneyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookTicketsConfirmationOnwardJourneyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BookTicketsConfirmationOnwardJourneyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BookTicketsConfirmationRoundTripJourneyCompletedEventHandler(object sender, BookTicketsConfirmationRoundTripJourneyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookTicketsConfirmationRoundTripJourneyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BookTicketsConfirmationRoundTripJourneyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConfirmCancelTicketsCompletedEventHandler(object sender, ConfirmCancelTicketsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmCancelTicketsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmCancelTicketsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelTicketsCompletedEventHandler(object sender, CancelTicketsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelTicketsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelTicketsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelBlockedTicketsOnwardJourneyCompletedEventHandler(object sender, CancelBlockedTicketsOnwardJourneyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelBlockedTicketsOnwardJourneyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelBlockedTicketsOnwardJourneyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelBlockedTicketsRoundTripJourneyCompletedEventHandler(object sender, CancelBlockedTicketsRoundTripJourneyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelBlockedTicketsRoundTripJourneyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelBlockedTicketsRoundTripJourneyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591